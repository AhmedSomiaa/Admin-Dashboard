// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fullname        String        @db.VarChar(255)
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  hasNotification Boolean       @default(false)
  isVerified      Boolean       @default(false)
  verifyToken     String?
  otp             Int?
  resetCode       Int?
  role            Role
  personalID      String?       @db.Text
  tax_declaration String?       @db.Text
  expoToken       String?       @db.Text
  Restaurant      Restaurant[]
  Reservation     Reservation[]
  Review          Review[]
  customer        Message[]
}

model Restaurant {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  name              String        @unique @db.VarChar(255)
  description       String        @db.Text
  category          Category[]
  City              City
  main_image        String        @db.Text
  menu_images       String[]      @db.Text
  extra_images      String[]      @default([]) @db.Text
  phone_number      Int
  reservation_quota Int
  latitude          Float
  longtitude        Float
  opening_time      DateTime      @db.Time
  closing_time      DateTime      @db.Time
  status            Status        @default(Pending)
  isPremium         Boolean       @default(false)
  rating            Float         @default(0)
  rating_count      Int           @default(0)
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           Int
  Reservation       Reservation[]
  Review            Review[]
  Message           Message[]
  payment           payment[]
}

model Reservation {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  notification Boolean    @default(false)
  updatedAt    DateTime   @updatedAt
  status       Status     @default(Pending)
  date         DateTime   @db.Date
  time         DateTime   @db.Time()
  guest_number Int
  canReview    CanReview  @default(Pending)
  customer     User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   Int
  restaurantId Int
}

model Review {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  review_title String     @db.VarChar(500)
  review_body  String     @db.Text
  rating       Int
  customer     User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   Int
  restaurantId Int
}

model Message {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  message      String     @db.Text
  customer     User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  senderId     Int
  customerId   Int
  restaurantId Int
}

model payment {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  restaurant      Restaurant @relation(fields: [restaurant_name], references: [name])
  restaurant_name String
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum Category {
  Italian
  Tunisian
  Japanese
  Lebanese
  Steakhouse
  Breakfast
  Mexican
  French
}

enum Status {
  Pending
  Approved
  Declined
}

enum CanReview {
  Pending
  Yes
  Done
}

enum City {
  Tunis
  Sousse
  Sfax
  Kairouan
  Mahdia
  Monastir
  Bizerte
  Touzeur
  Djerba
  Nabel
  Kelibia
  Gabes
}
